% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/feature_table_s3_map.R
\name{map_with_name}
\alias{map_with_name}
\alias{map_features_with_name}
\alias{map_samples_with_name}
\title{Apply a function over FeatureTable margins and return a new FeatureTable.}
\usage{
map_with_name(ft, margin, fn, ...)

map_features_with_name(ft, fn, ...)

map_samples_with_name(ft, fn, ...)
}
\arguments{
\item{ft}{A FeatureTable.}

\item{margin}{Margin to apply the function over.  E.g., \code{1} or
\code{"samples"} indicates rows, \code{2} or \code{"features"} indicates
columns.}

\item{fn}{The function to be applied over the specified margin.  This
function should have at least 2 parameters, the data to be applied over,
and the name of the current row or column.  See details.}

\item{...}{Optional arguments to \code{fn}.}
}
\value{
A new FeatureTable with the result of applying \code{fn} over
  \code{margin}.
}
\description{
Returns a new FeatureTable by applying a function to margins of the
\code{$data} field of a \code{FeatureTable}.
}
\details{
This function is similar to \code{\link{map}}, except that the function
should accept name of the row or column currently being applied over.  See
Examples.

Note that if you want to include some external data about samples or features
inside the mapping function, you may want to use
\code{\link{map_with_index}}.

Named helpers can also be used rather than specifying the \code{margin}
argument.

\itemize{
  \item \code{\link{map_features_with_name}}
  \item \code{\link{map_samples_with_name}}
}
}
\examples{
data(ft)

# This FeatureTable includes a \code{Length} variable in the \code{feature_data}.
#
# You can access it like this:
ft$feature_data$Length

# Let's say you want to divide the count of each feature by its length.
#
# To get easy access to that data, you can use map_with_name like so:
ft$map_with_name("features", function(feature, name) {
  feature_length <- ft$feature_data[name, "Length"]

  # Some features have an NA for length, so just set those to 1.
  feature_length <- ifelse(is.na(feature_length), 1, feature_length)

  feature / feature_length
})

# And of course, the s3 function is also available!
map_with_name(ft, "features", function(feature, name) {
  feature_length <- ft$feature_data[name, "Length"]

  # Some features have an NA for length, so just set those to 1.
  feature_length <- ifelse(is.na(feature_length), 1, feature_length)

  feature / feature_length
})

}
\seealso{
Other apply functions: 
\code{\link{map_with_index}()},
\code{\link{map}()}
}
\concept{apply functions}
